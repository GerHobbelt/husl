// Generated by CoffeeScript 1.3.3
(function() {
  var $canvas, $scope, ctx, current_H, current_L, current_S, hslToHex, hslToRgb, randomHue, redraw, redrawSwatch, update;

  hslToRgb = function(h, s, l) {
    var b, g, hue2rgb, p, q, r;
    h /= 360;
    if (s === 0) {
      r = g = b = l;
    } else {
      hue2rgb = function(p, q, t) {
        if (t < 0) {
          t += 1;
        }
        if (t > 1) {
          t -= 1;
        }
        if (t < 1 / 6) {
          return p + (q - p) * 6 * t;
        }
        if (t < 1 / 2) {
          return q;
        }
        if (t < 2 / 3) {
          return p + (q - p) * (2 / 3 - t) * 6;
        }
        return p;
      };
      q = l < 0.5 ? l * (1 + s) : l + s - l * s;
      p = 2 * l - q;
      r = hue2rgb(p, q, h + 1 / 3);
      g = hue2rgb(p, q, h);
      b = hue2rgb(p, q, h - 1 / 3);
    }
    return [r, g, b];
  };

  hslToHex = function(h, s, l) {
    var rgb;
    rgb = hslToRgb(h, s / 100, l / 100);
    return $.colorspaces.converter('sRGB', 'hex')(rgb);
  };

  randomHue = function() {
    return Math.floor(Math.random() * 360);
  };

  $('#demo1').click(function() {
    return $(this).closest('div').find('.demo').each(function() {
      return $(this).css('background-color', $.husl.husl(randomHue(), 90, 60));
    });
  });

  $('#demo2').click(function() {
    return $(this).closest('div').find('.demo').each(function() {
      return $(this).css('background-color', hslToHex(randomHue(), 90, 60));
    });
  });

  $('#demo1').click();

  $('#demo2').click();

  $('#rainbow-husl div').each(function(index) {
    return $(this).css('background-color', $.husl.husl(index * 36, 90, 60));
  });

  $('#rainbow-hsl div').each(function(index) {
    return $(this).css('background-color', hslToHex(index * 36, 90, 60));
  });

  $canvas = $('#picker canvas');

  $scope = $('#picker .scope');

  ctx = $canvas[0].getContext('2d');

  redrawSwatch = (function() {
    var $channels, $hex, $swatch, c, chromaFromHex, conv, _i, _len, _ref;
    $swatch = $('#picker .swatch');
    $hex = $('#picker .hex');
    $channels = {};
    _ref = ['R', 'G', 'B', 'H', 'S', 'L', 'C'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      c = _ref[_i];
      $channels[c] = $("#picker ." + c);
    }
    chromaFromHex = function() {};
    conv = $.colorspaces.converter('hex', 'CIELCHuv');
    return function() {
      var B, C, G, R, hex, _ref1;
      $channels.H.text(Math.round(current_H));
      $channels.S.text(Math.round(current_S));
      $channels.L.text(Math.round(current_L));
      _ref1 = $.husl.husl(current_H, current_S, current_L, true), R = _ref1[0], G = _ref1[1], B = _ref1[2];
      $channels.R.text(Math.round(R * 255));
      $channels.G.text(Math.round(G * 255));
      $channels.B.text(Math.round(B * 255));
      hex = $.husl.husl(current_H, current_S, current_L);
      $swatch.css('background-color', hex);
      $hex.text(hex);
      C = conv(hex)[1];
      $channels.C.text(Math.round(C));
      $scope.css('left', current_H - 5);
      $scope.css('top', (100 - current_S) * 2 - 5);
      return $scope.css('border-color', current_L > 50 ? '#1b1b1b' : 'white');
    };
  })();

  redraw = function(L) {
    var dim, h, height, s, width, x, xn, y, yn, _i, _j;
    redrawSwatch();
    width = 360;
    height = 200;
    dim = 4;
    xn = width / dim;
    yn = height / dim;
    for (x = _i = 0; 0 <= xn ? _i <= xn : _i >= xn; x = 0 <= xn ? ++_i : --_i) {
      for (y = _j = 0; 0 <= yn ? _j <= yn : _j >= yn; y = 0 <= yn ? ++_j : --_j) {
        if (L !== current_L) {
          return;
        }
        h = x * dim + dim / 2;
        s = 100 * (1 - y * dim / height);
        ctx.fillStyle = $.husl.husl(h, s, L);
        ctx.fillRect(x * dim, y * dim, dim, dim);
      }
    }
  };

  current_H = 200;

  current_S = 80;

  current_L = 50;

  redraw(current_L);

  $('#picker .slider').slider({
    orientation: 'vertical',
    value: current_L,
    slide: function(event, ui) {
      current_L = ui.value;
      return redraw(ui.value);
    }
  });

  update = function(e) {
    var offset;
    e.stopPropagation();
    e.preventDefault();
    offset = $canvas.offset();
    current_H = e.pageX - offset.left;
    current_S = 100 - (e.pageY - offset.top) / 2;
    return redrawSwatch();
  };

  $canvas.mousedown(function(e) {
    $canvas.mousemove(update);
    $scope.hide();
    return update(e);
  });

  $(document).mouseup(function() {
    $scope.show();
    return $canvas.unbind('mousemove', update);
  });

}).call(this);
